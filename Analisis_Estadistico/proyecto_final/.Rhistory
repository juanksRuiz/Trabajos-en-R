install.packages("ggplot2")
install.packages("dplyr")
library("ggplot2")
library("dplyr")
#df18_1 <- read.csv(file = "C:\\Users\\juank\\Downloads\\BasesDeDatos_proyecto_AED\\Saber_11__2018_1.csv", encoding="UTF-8",header = TRUE)
# en Hipathia
df18_1 <- read.csv(file = "C:\\Users\\prestamour\\Downloads\\BasesDeDatos_proyecto_AED\\BasesDeDatos_proyecto_AED\\Saber_11__2018_1.csv", encoding="UTF-8", header=TRUE)
df18_1 <- read.csv(file = "C:\\Users\\juank\\Downloads\\BasesDeDatos_proyecto_AED\\Saber_11__2018_1.csv", encoding="UTF-8",header = TRUE)
# en Hipathia
#df18_1 <- read.csv(file = "C:\\Users\\prestamour\\Downloads\\BasesDeDatos_proyecto_AED\\BasesDeDatos_proyecto_AED\\Saber_11__2018_1.csv", encoding="UTF-8", header=TRUE)
col1 = c(3,17:21,28:35,50,56,60,61,67, 70,73, 76,79,82,58,59)
df18_1 <- df18_1[,col1]
colnames(df18_1)
df18_2 <- read.csv(file = "C:\\Users\\juank\\Downloads\\BasesDeDatos_proyecto_AED\\Saber_11__2018_2.csv", encoding="UTF-8", header = TRUE)
# en Hipathia
#df18_2 <- read.csv(file = "C:\\Users\\prestamour\\Downloads\\BasesDeDatos_proyecto_AED\\BasesDeDatos_proyecto_AED\\Saber_11__2018_2.csv", encoding="UTF-8", header=TRUE)
colnames(df18_2) <- tolower(colnames(df18_2))
col2 <- c(3,12:16,23:30,45,51,55:56,62, 65, 68, 71,74,77,53,54)
df18_2 <- df18_2[,col2]
df18 <- rbind(df18_1,df18_2)
arreglarNAIngles <- function(df){
print("elementos NA en la columna de ingles:")
print(sum(is.na(df[,23])))
# indices de los registros que son NA en ingles
na_ingles <- which(is.na(df[,23]))
# obtengamos los df18 en las otras competencias de los registros con NA en ingles
dfNA <- df[na_ingles,]
# encontrando los df18 de ingles faltantes
dfNA[,23] <- round((13/5)*dfNA[,24] - 3*(dfNA[,19] + dfNA[,20] + dfNA[,21] + dfNA[,22]))
count = 1
for (i in na_ingles) {
df[i,23] <- dfNA[count,23]
count = count + 1
}
print("elementos NA despues:")
print(sum(is.na(df[,23])))
return(df)
}
df18 <- arreglarNAIngles(df18)
#=================================
# pegando la columna de las regiones
cole_region <- c()
for (i in 1:nrow(df18)) {
if(df18$cole_depto_ubicacion[i] %in% c("ANTIOQUIA","BOYACA","CUNDINAMARCA","HUILA","NORTE SANTANDER","QUINDIO","RISARALDA","SANTANDER","TOLIMA")) {
cole_region <- c(cole_region, "Andina")
}else if (df18$cole_depto_ubicacion[i] %in% c("ATLANTICO","BOLIVAR","CESAR","CORDOBA","LA GUAJIRA","MAGDALENA","SAN ANDRES")){
cole_region <- c(cole_region, "Caribe")
}else if(df18$cole_depto_ubicacion[i] %in% c("CHOCO","VALLE","CAUCA","NARIÃO")){
cole_region <- c(cole_region, "Pacifico")
}else if (df18$cole_depto_ubicacion[i] %in% c("AMAZONAS","CAQUETA","GUAINIA","GUAVIARE","PUTUMAYO","VAUPES")){
cole_region <- c(cole_region, "Amazonia")
}else if(df18$cole_depto_ubicacion[i] %in% c("META","VICHADA","CASANARE","ARAUCA")){
cole_region <- c(cole_region, "Orinoquia")
}
}
#______________________________________________________________________________________
# organizacion por regiones
regiones <- c("Amazonia","Andina","Caribe","Insular","Orinoquia","Pacifico")
dic_region <- hash()
#________________________________________________________________________________
# Separacion de datos por departamento
install.packages("hash")
library(hash)
dic_dept <- hash()
for (dep in levels(df18$cole_depto_ubicacion)) {
dic_dept[[dep]] = subset(df18,df18$cole_depto_ubicacion == dep)
}
#______________________________________________________________________________________
# organizacion por estrato
dic_estrato <- hash()
for (e in levels(df18$fami_estratovivienda)) {
dic_estrato[[e]] = subset(df18,df18$fami_estratovivienda == e)
}
#______________________________________________________________________________________
# organizacion (si es  colegio en  zona rural o urbana)
dic_zona <- hash()
for (z in levels(df18$cole_area_ubicacion)) {
dic_zona[[z]] = subset(df18,df18$cole_area_ubicacion == z)
}
#______________________________________________________________________________________
# organizacion por regiones
regiones <- c("Amazonia","Andina","Caribe","Insular","Orinoquia","Pacifico")
dic_region <- hash()
for (k in (keys(dic_dept))) {
if ((k == "ANTIOQUIA") || (k == "BOYACA") || (k == "CUNDINAMARCA")
|| (k == "BOGOTA") || (k == "HUILA") || (k == "NORTE SANTANDER")
|| (k == "QUINDIO") || (k == "RISARALDA") || (k == "SANTANDER")
|| (k == "TOLIMA")){
dic_region[["Andina"]] = rbind(dic_region[["Andina"]], dic_dept[[k]])
}else if ((k == "ATLANTICO") || (k == "BOLIVAR") || (k == "CESAR")
|| (k == "CORDOBA") || (k == "LA GUAJIRA") || (k == "MAGDALENA")
|| (k == "SAN ANDRES")){
dic_region[["Caribe"]] = rbind(dic_region[["Caribe"]], dic_dept[[k]])
}else if((k == "CHOCO") || (k == "VALLE") || (k == "CAUCA") || (k == "NARI??O")){
dic_region[["Pacifico"]] = rbind(dic_region[["Pacifico"]], dic_dept[[k]])
}else if ((k == "AMAZONAS") || (k == "CAQUETA") || (k == "GUAINIA")
|| (k == "GUAVIARE") || (k == "PUTUMAYO") || (k == "VAUPES")){
dic_region[["Amazonia"]] = rbind(dic_region[["Amazonia"]], dic_dept[[k]])
}else if((k == "META") || (k == "VICHADA") || (k == "CASANARE") || (k == "ARAUCA")){
dic_region[["Orinoquia"]] = rbind(dic_region[["Orinoquia"]], dic_dept[[k]])
}
}
# para el global
ggplot(df18, aes(x=df18$punt_global)) + geom_histogram(color="black", fill="gray",binwidth = 5) + ggtitle("Histograma del puntaje global")
# para lectura critica
ggplot(df18, aes(x=df18$punt_lectura_critica)) + geom_histogram(color="black", fill="coral3",binwidth = 2)+ ggtitle("Histograma del puntaje  en lectura cr?tica")
# para matemÃ¡ticas
ggplot(df18, aes(x=df18$punt_matematicas)) + geom_histogram(color="black", fill="chartreuse4",binwidth = 2) + ggtitle("Histograma del puntaje en Matem?ticas")
# para ciencias naturales
ggplot(df18, aes(x=df18$punt_c_naturales)) + geom_histogram(color="black", fill="dodgerblue3",binwidth = 2)+ ggtitle("Histograma del puntaje  en Ciencias Naturales")
# para sociales y ciudadanas
ggplot(df18, aes(x=df18$punt_sociales_ciudadanas)) + geom_histogram(color="black", fill="darkorchid4", binwidth = 1) + ggtitle("Histograma del puntaje en Sociales y Ciudadanas")
#para ingles
ggplot(df18, aes(x=df18$punt_ingles)) + geom_histogram(color="black", fill="gold", binwidth = 2) + ggtitle("Histograma del puntaje en Ingles")
# plotting PCA
install.packages("remotes")
install.packages("remotes")
remotes::install_github("vqv/ggbiplot")
library(ggbiplot)
library(ggfortify)
df2 <- rbind(df18_1,df18_2)
# con paquete ggfortify
autoplot(pca_Amazonia, data = dic_region[["Amazonia"]],
loadings = TRUE,loadings.label = TRUE) + ggtitle("Datos en funcion de PC1 y PC2 en Amazonia")
# HACER pca PARA CADA REGIÃN
# se hace PCA con los datos estandarizados
pca_Amazonia <- prcomp(dic_region[["Amazonia"]][,19:23], center = TRUE, scale. = TRUE)
S1 <- cov(dic_region[["Amazonia"]][,19:23])
summary(pca_Amazonia)
e1 <- eigen(S1)$vectors
pca_Andina <- prcomp(dic_region[["Andina"]][,19:23], center = TRUE, scale. = TRUE)
summary(pca_Andina)
pca_Caribe <- prcomp(dic_region[["Caribe"]][,19:23], center = TRUE, scale. = TRUE)
summary(pca_Caribe)
pca_Orinoquia <- prcomp(dic_region[["Orinoquia"]][,19:23], center = TRUE, scale. = TRUE)
summary(pca_Orinoquia)
pca_Pacifico <- prcomp(dic_region[["Pacifico"]][,19:23], center = TRUE, scale. = TRUE)
summary(pca_Pacifico)
pca_Amazonia$rotation
pca_Andina$rotation
pca_Caribe$rotation
pca_Orinoquia$rotation
pca_Pacifico$rotation
# con paquete ggfortify
autoplot(pca_Amazonia, data = dic_region[["Amazonia"]],
loadings = TRUE,loadings.label = TRUE) + ggtitle("Datos en funcion de PC1 y PC2 en Amazonia")
autoplot(pca_Andina, data = dic_region[["Andina"]],
loadings = TRUE,loadings.label = TRUE) + ggtitle("Datos en funcion de PC1 y PC2 en region Andina")
?subset
View(df18)
LC100 <- subset(df18,df18$punt_lectura_critica == 100)
class(LC100)
nrows(LC100)
numrows(LC100)
nrow(LC100)
M100 <- subset(df18,df18$punt_matematicas == 100)
CN100 <- subset(df18,df18$punt_c_naturales == 100)
SC100 <- subset(df18,df18$punt_sociales_ciudadanas == 100)
I100 <- subset(df18,df18$punt_ingles == 100)
nrow(I100)
nrow(M00)
nrow(M100)
?barplot()
str(M100)
?count()
?sum()
#==========================================================================================
#==========================================================================================
#==========================================================================================
# Se quiere ver que caracteristicas tienen los individuos que tienen puntaje 0 o 100 en
# cada competencia
library(plyr)
count(LC100,colnames(LC100)[7:14])
count(LC100,colnames(LC100)[7:14])
)
?count()
?count()
?dplyr::count()
?group_by()
?table)=
?table()
levels(df18$fami_tieneconsolavideojuegos)
for (i in 7:14) {
levels(df18[,i]) <- c(NaN,FALSE,TRUE)
}
View(df18)
sum(df18[,7])
levels(df18[,7])
for (i in 7:14) {
levels(df18[,i]) <- c(NaN,FALSE,TRUE)
as.integer(df18[,i])
}
sum(df18[,7])
count(df18[,7])
class(> count(df18[,7])
class(count(df18[,7])
)
for (i in 7:14) {
levels(df18[,i]) <- c(NaN,FALSE,TRUE)
count(df18[,i])
}
class(count(df18[,8])
)
count(df18[,7])
for (i in 7:14) {
levels(df18[,i]) <- c(NaN,FALSE,TRUE)
print(count(df18[,i]))
}
freq <- data.frame()
for (i in 7:14) {
levels(df18[,i]) <- c(NaN,FALSE,TRUE)
rbind(freq, count(df18[,i]))
}
freq
for (i in 7:14) {
levels(df18[,i]) <- c(NaN,FALSE,TRUE)
cbind(freq, count(df18[,i]))
}
c = count(df18[,7])
c
c[1]
c[1,1]
c$freq
rm(freq)
for (i in 7:14) {
levels(df18[,i]) <- c(NaN,FALSE,TRUE)
cbind(f, count(df18[,i])$freq)
}
f <- data.frame()
for (i in 7:14) {
levels(df18[,i]) <- c(NaN,FALSE,TRUE)
cbind(f, count(df18[,i])$freq)
}
#==========================================================================================
#==========================================================================================
#==========================================================================================
# Se quiere ver que caracteristicas tienen los individuos que tienen puntaje 0 o 100 en
# cada competencia
library(plyr)
f <- data.frame()
for (i in 7:14) {
levels(df18[,i]) <- c(NaN,FALSE,TRUE)
if(i == 7){
f <- count(df18[,i])$freq
}
else{
cbind(f, count(df18[,i])$freq)
}
}
f
f
class(f)
count(df18[,7:14])
f
t(f)
class(count(df18[,7:14]))
for (i in 7:14) {
levels(df18[,i]) <- c(NaN,FALSE,TRUE)
print(count(df18[,i]))
print("--------------------------------")
}
rmI(f)
rm(f)
rm(freq)
class(count(df18[,7]))
freq
f <- c()
for (i in 7:14) {
levels(df18[,i]) <- c(NaN,FALSE,TRUE)
f <- cbind(count(df18[,i]))
print(count(df18[,i]))
print("--------------------------------")
}
f
for (i in 7:14) {
levels(df18[,i]) <- c(NaN,FALSE,TRUE)
f <- cbind(f, count(df18[,i]))
print(count(df18[,i]))
print("--------------------------------")
}
f
f <- f[,12,4,6,8,10,12,14,16,18]
f <- f[,c(12,4,6,8,10,12,14,16,18)]
f
for (i in 7:14) {
levels(df18[,i]) <- c(NaN,FALSE,TRUE)
f <- cbind(f, count(df18[,i]))
print(count(df18[,i]))
print("--------------------------------")
}
f
rm(f)
for (i in 7:14) {
levels(df18[,i]) <- c(NaN,FALSE,TRUE)
f <- cbind(f, count(df18[,i]))
}
f <- c()
for (i in 7:14) {
levels(df18[,i]) <- c(NaN,FALSE,TRUE)
f <- cbind(f, count(df18[,i]))
}
f <- c()
for (i in 7:14) {
levels(df18[,i]) <- c(NaN,FALSE,TRUE)
f <- cbind(f, count(df18[,i]))
}
class(f)
rm(f)
?data.frame()
levels(df18[,7]) <- c(NaN,FALSE,TRUE)
f <- c()
for (i in 7:14) {
levels(df18[,i]) <- c(NaN,FALSE,TRUE)
f <- cbind(f, count(df18[,i]))
}
f <- c()
f <- f[,c(12,4,6,8,10,12,14,16,18)]
f
for (i in 7:14) {
levels(df18[,i]) <- c(NaN,FALSE,TRUE)
c <- count(df18[,i])
f <- cbind(f,c$freq)
}
f
class(f)
rownames(f) <- c("NaN", "TRUE", "FALSE")
colnames(f) <- colnames(df18)[7:14]
f
f1 <- c()
for (i in 7:14) {
levels(LC100[,i]) <- c(NaN,FALSE,TRUE)
c <- count(df18[,i])
f1 <- cbind(f1,c$freq)
}
f1
f
f
f1
f1 <- c()
for (i in 7:14) {
levels(LC100[,i]) <- c(NaN,FALSE,TRUE)
c <- count(LC100[,i])
f1 <- cbind(f1,c$freq)
}
f1
LC100 <- subset(df18,df18$punt_lectura_critica == 100)
f1 <- c()
for (i in 7:14) {
levels(LC100[,i]) <- c(NaN,FALSE,TRUE)
c <- count(LC100[,i])
f1 <- cbind(f1,c$freq)
}
rownames(f1) <- c("NaN", "TRUE", "FALSE")
colnames(f1) <- colnames(df18)[7:14]
#-------------------------------------
M100 <- subset(df18,df18$punt_matematicas == 100)
f2 <- c()
for (i in 7:14) {
levels(M100[,i]) <- c(NaN,FALSE,TRUE)
c <- count(M100[,i])
f2 <- cbind(f2,c$freq)
}
rownames(f2) <- c("NaN", "TRUE", "FALSE")
colnames(f2) <- colnames(df18)[7:14]
#--------------------------------------
CN100 <- subset(df18,df18$punt_c_naturales == 100)
f3 <- c()
for (i in 7:14) {
levels(CN100[,i]) <- c(NaN,FALSE,TRUE)
c <- count(CN100[,i])
f3 <- cbind(f3,c$freq)
}
rownames(f3) <- c("NaN", "TRUE", "FALSE")
colnames(f3) <- colnames(df18)[7:14]
#--------------------------------------
SC100 <- subset(df18,df18$punt_sociales_ciudadanas == 100)
f4 <- c()
for (i in 7:14) {
levels(SC100[,i]) <- c(NaN,FALSE,TRUE)
c <- count(SC100[,i])
f4 <- cbind(f4,c$freq)
}
rownames(f4) <- c("NaN", "TRUE", "FALSE")
colnames(f4) <- colnames(df18)[7:14]
#----------------------------------------
I100 <- subset(df18,df18$punt_ingles == 100)
f5 <- c()
for (i in 7:14) {
levels(I100[,i]) <- c(NaN,FALSE,TRUE)
c <- count(I100[,i])
f5 <- cbind(f5,c$freq)
}
rownames(f5) <- c("NaN", "TRUE", "FALSE")
colnames(f5) <- colnames(df18)[7:14]
f
f1
f2
f3
f4
f5
rm(f)
?barplot
barplot(f1,main = "Diagrama en barras de los que sacaron 100 en Lectura critica")
ncol(f1)
ncol(f2)
ncol(f3)
ncol(f5)
ncol(f4)
barplot(f2,main = "Diagrama en barras de los que sacaron 100 en Matematicas")
